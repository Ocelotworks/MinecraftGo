package packet

import (
	"../dataTypes"
	"fmt"
)

var heightMap = []byte{
	0x41, 0x48, 0x4a, 0x4c, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4c, 0x4b, 0x4b, 0x40, 0x44, 0x4a, 0x4b, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4c, 0x4c, 0x4c, 0x40, 0x42, 0x49, 0x4b, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4c, 0x4c, 0x40, 0x42, 0x48, 0x4b, 0x4d, 0x4d, 0x4d, 0x4d, 0x4e, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x40, 0x41, 0x47, 0x4b, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4d, 0x40, 0x41, 0x47, 0x4b, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x40, 0x41, 0x47, 0x4b, 0x4e, 0x4e, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4e, 0x4e, 0x4d, 0x40, 0x41, 0x46, 0x4b, 0x4f, 0x4f, 0x4f, 0x50, 0x50, 0x50, 0x50, 0x4f, 0x4f, 0x4e, 0x4d, 0x4d, 0x40, 0x41, 0x46, 0x4b, 0x4f, 0x4f, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x4f, 0x4d, 0x4d, 0x40, 0x44, 0x48, 0x4b, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x56, 0x56, 0x56, 0x43, 0x47, 0x49, 0x4c, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x56, 0x56, 0x57, 0x56, 0x48, 0x4a, 0x4b, 0x4e, 0x51, 0x51, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x56, 0x57, 0x58, 0x57, 0x4b, 0x4c, 0x4d, 0x4f, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x51, 0x56, 0x56, 0x57, 0x56, 0x4e, 0x4e, 0x4f, 0x50, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x52, 0x51, 0x51, 0x56, 0x56, 0x56, 0x50, 0x50, 0x50, 0x51, 0x51, 0x52, 0x52, 0x53, 0x53, 0x53, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x52, 0x52, 0x51, 0x51, 0x50, 0x51, 0x52, 0x53, 0x53, 0x53, 0x53, 0x52, 0x5b, 0x52, 0x52, 0x51,
}

type ClientSettings struct {
	Locale             string `proto:"string"`
	ViewDistance       byte   `proto:"unsignedByte"`
	ChatMode           int    `proto:"varInt"`
	ChatColours        bool   `proto:"bool"`
	DisplayedSkinParts byte   `proto:"unsignedByte"`
	MainHand           int    `proto:"varInt"`
}

func (cs *ClientSettings) GetPacketId() int {
	return 0x05
}

func (cs *ClientSettings) Handle(packet []byte, connection *Connection) {
	fmt.Println("Got Client Settings:")
	fmt.Println("Locale: ", cs.Locale)
	fmt.Println("View Distance: ", cs.ViewDistance)
	fmt.Println("Chat Mode: ", cs.ChatMode)
	fmt.Println("Chat Colours: ", cs.ChatColours)
	fmt.Println("Displayed skin: ", cs.DisplayedSkinParts)
	fmt.Println("Main Hand: ", cs.MainHand)

	//
	//inData, exception := ioutil.ReadFile("world/region/r.1.1.mca")
	//
	//if exception != nil {
	//	fmt.Println("Reading file")
	//	fmt.Println(exception)
	//	return
	//}
	//
	//region := dataTypes.ReadRegionFile(inData)
	//
	//chunk := region.Chunks[0]

	randomBlocks := make([]int64, 4096)
	for i := 0; i < 4096; i++ {
		randomBlocks[i] = int64(i % 10)
	}

	randomBiomes := make([]int, 1024)
	for i := 0; i < 1024; i++ {
		randomBiomes[i] = 1
	}

	chunkRaw := dataTypes.WriteChunk(dataTypes.NetChunk{
		BlockCount:   10,
		BitsPerBlock: 8,
		Palette:      []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		DataArray:    randomBlocks,
	})

	chunkData := Packet(&ChunkData{
		X:                0,
		Z:                0,
		FullChunk:        true,
		PrimaryBitMask:   0b00000000000000000000000000000000,
		HeightMap:        heightMap,
		Biomes:           randomBiomes,
		DataSize:         len(chunkRaw),
		Data:             chunkRaw,
		BlockEntityCount: 0,
		BlockEntities:    make([]byte, 0),
	})

	connection.SendPacket(&chunkData)

	//playerPos := Packet(&PlayerPositionAndLook{
	//	X:          12345,
	//	Y:          12345,
	//	Z:          12345,
	//	Yaw:        12345,
	//	Pitch:      12345,
	//	Flags:      0,
	//	TeleportID: 12345,
	//})
	//
	//connection.SendPacket(&playerPos)

	//TODO Player info

	//viewPos := Packet(&UpdateViewPosition{
	//	ChunkX: 1,
	//	ChunkZ: 2,
	//})
	//
	//connection.SendPacket(&viewPos)
}
